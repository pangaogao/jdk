package test.org.omg.DynamicAny;


/**
* test.org/omg/DynamicAny/DynAnyFactoryHelper.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from /Users/java_re/workspace/8-2-build-macosx-x86_64/jdk8u131/8869/corba/src/share/classes/test.org/omg/DynamicAny/DynamicAny.idl
* Wednesday, March 15, 2017 1:33:58 AM PDT
*/


/**
    * DynAny objects can be created by invoking operations on the DynAnyFactory object.
    * Generally there are only two ways to create a DynAny object:
    * <UL>
    * <LI>invoking an operation on an existing DynAny object
    * <LI>invoking an operation on a DynAnyFactory object
    * </UL>
    * A constructed DynAny object supports operations that enable the creation of new DynAny
    * objects encapsulating access to the value of some constituent.
    * DynAny objects also support the copy operation for creating new DynAny objects.
    * A reference to the DynAnyFactory object is obtained by calling ORB.resolve_initial_references()
    * with the identifier parameter set to the string constant "DynAnyFactory".
    * <P>Dynamic interpretation of an any usually involves creating a DynAny object using create_dyn_any()
    * as the first step. Depending on the type of the any, the resulting DynAny object reference can be narrowed
    * to a DynFixed, DynStruct, DynSequence, DynArray, DynUnion, DynEnum, or DynValue object reference.
    * <P>Dynamic creation of an any involves creating a DynAny object using create_dyn_any_from_type_code(),
    * passing the TypeCode associated with the value to be created. The returned reference is narrowed to one of
    * the complex types, such as DynStruct, if appropriate. Then, the value can be initialized by means of
    * invoking operations on the resulting object. Finally, the to_any operation can be invoked
    * to create an any value from the constructed DynAny.
    */
abstract public class DynAnyFactoryHelper
{
  private static String  _id = "IDL:omg.test.org/DynamicAny/DynAnyFactory:1.0";

  public static void insert (test.org.omg.CORBA.Any a, test.org.omg.DynamicAny.DynAnyFactory that)
  {
    test.org.omg.CORBA.portable.OutputStream out = a.create_output_stream ();
    a.type (type ());
    write (out, that);
    a.read_value (out.create_input_stream (), type ());
  }

  public static test.org.omg.DynamicAny.DynAnyFactory extract (test.org.omg.CORBA.Any a)
  {
    return read (a.create_input_stream ());
  }

  private static test.org.omg.CORBA.TypeCode __typeCode = null;
  synchronized public static test.org.omg.CORBA.TypeCode type ()
  {
    if (__typeCode == null)
    {
      __typeCode = test.org.omg.CORBA.ORB.init ().create_interface_tc (test.org.omg.DynamicAny.DynAnyFactoryHelper.id (), "DynAnyFactory");
    }
    return __typeCode;
  }

  public static String id ()
  {
    return _id;
  }

  public static test.org.omg.DynamicAny.DynAnyFactory read (test.org.omg.CORBA.portable.InputStream istream)
  {
      throw new test.org.omg.CORBA.MARSHAL ();
  }

  public static void write (test.org.omg.CORBA.portable.OutputStream ostream, test.org.omg.DynamicAny.DynAnyFactory value)
  {
      throw new test.org.omg.CORBA.MARSHAL ();
  }

  public static test.org.omg.DynamicAny.DynAnyFactory narrow (test.org.omg.CORBA.Object obj)
  {
    if (obj == null)
      return null;
    else if (obj instanceof test.org.omg.DynamicAny.DynAnyFactory)
      return (test.org.omg.DynamicAny.DynAnyFactory)obj;
    else if (!obj._is_a (id ()))
      throw new test.org.omg.CORBA.BAD_PARAM ();
    else
    {
      test.org.omg.CORBA.portable.Delegate delegate = ((test.org.omg.CORBA.portable.ObjectImpl)obj)._get_delegate ();
      test.org.omg.DynamicAny._DynAnyFactoryStub stub = new test.org.omg.DynamicAny._DynAnyFactoryStub ();
      stub._set_delegate(delegate);
      return stub;
    }
  }

  public static test.org.omg.DynamicAny.DynAnyFactory unchecked_narrow (test.org.omg.CORBA.Object obj)
  {
    if (obj == null)
      return null;
    else if (obj instanceof test.org.omg.DynamicAny.DynAnyFactory)
      return (test.org.omg.DynamicAny.DynAnyFactory)obj;
    else
    {
      test.org.omg.CORBA.portable.Delegate delegate = ((test.org.omg.CORBA.portable.ObjectImpl)obj)._get_delegate ();
      test.org.omg.DynamicAny._DynAnyFactoryStub stub = new test.org.omg.DynamicAny._DynAnyFactoryStub ();
      stub._set_delegate(delegate);
      return stub;
    }
  }

}
